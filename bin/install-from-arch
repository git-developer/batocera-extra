#!/bin/sh
set -eu

ARCH_PACKAGE_CACHE="${ARCH_PACKAGE_CACHE:-${XDG_CACHE_HOME:-/userdata/system/.cache}/arch-packages}"
ARCH_PACKAGE_CACHE="${ARCH_PACKAGE_CACHE%/}"
TARGET_ARCHITECTURE="${TARGET_ARCHITECTURE:-$(uname -m)}"
arch_metadata="$(dirname "$0")/.arch"

log() {
  echo >&2 "${@}"
}

cancel() {
  log "Error: ${@}"
  return 1
}

find_package_url() {
  local name="${1}" revision="${2}" repo="${3}" arch="${4}" os_arch="${5}"

  if echo "${revision}" | grep -qP '^\d{4}.\d{2}.\d{2}$'; then
    date="$(printf %s "${revision}" | tr -c '[:digit:]' '/')"
  fi

  if [ "${arch}" = any ]; then
    target_arch="${os_arch}"
  else
    target_arch="${arch}"
  fi

  case "${target_arch}" in
    x86_64)       url="$(find_url_x86 "${name}" "${date-}" "${revision}" "${repo}" "${arch}" "${target_arch}")" ;;
    aarch64|arm*) url="$(find_url_arm "${name}" "${date-}" "${revision}" "${repo}" "${arch}" "${target_arch}")" ;;
    *) cancel "Unsupported architecture '${arch}'"
  esac
  printf '%s\n' "${url}"
}

find_url_x86() {
  local name="${1}" date="${2}" revision="${3}" repo="${4}" arch="${5}" os_arch="${6}" archive_url="https://archive.archlinux.org"

  if [ "${date-}" ]; then
    find_url_by_date "${name}" "${date}" "${repo}" "${arch}" "${os_arch}" "${archive_url}/repos/${date}/${repo}/os/${os_arch}"
  elif [ "${revision}" ]; then
    find_url_by_revision "${name}" "${revision}" "${arch}" zst "${archive_url}"
  else
    curl -fsSL -D - "https://archlinux.org/packages/${repo}/${arch}/${name}/download/" \
      | sed -nE 's/\s*location:\s*(.+)/\1/p' \
      | tr -d '\r' \
      | grep .
  fi
}

find_url_arm() {
  local name="${1}" date="${2}" revision="${3}" repo="${4}" arch="${5}" os_arch="${6}" archive_url="http://tardis.tiny-vps.com/aarm"

  if [ "${os_arch#arm}" != "${os_arch}" ]; then
    os_arch=armv7h;
  fi

  if [ "${date-}" ]; then
    find_url_by_date "${name}" "${date}" "${repo}" "${arch}" "${os_arch}" "${archive_url}/repos/${date}/${os_arch}/${repo}"
  elif [ "${revision}" ]; then
    find_url_by_revision "${name}" "${revision}" "${arch}" xz "${archive_url}"
  else
    curl -fsSL "https://archlinuxarm.org/packages/${arch}/${name}" \
    | sed -nE 's/.*"(http[^"]+)">Download.*/\1/p' \
    | grep .
  fi
}

find_url_by_date() {
  local name="${1}" date="${2}" repo="${3}" arch="${4}" os_arch="${5}" url="${6}"

  mkdir -p "${ARCH_PACKAGE_CACHE}"
  index_name="$(printf %s "${date}" | tr -c '[:digit:]' '-').${repo}.${os_arch}.packages"
  packages="${ARCH_PACKAGE_CACHE}/${index_name}"
  if [ ! -s "${packages}" ]; then
    known_packages="${arch_metadata}/${index_name}"
    if [ -r "${known_packages}" ]; then
      cp -a "${known_packages}" "${packages}"
    else
      # use a temp file to avoid an incomplete file on curl errors
      index="$(mktemp --tmpdir "${index_name}.XXXXXX")"
      curl -fsSL "${url}/" >>"${index}"
      <"${index}" sed -nE 's/.*href="([^"]+\.pkg\.tar\.\w+)".*/\1/p' | grep . >"${packages}"
      rm "${index}"
    fi
  fi

  path="$(grep -P "^${name}-(\d.+)-${arch}\.pkg\.tar\.\w+$" "${packages}" | sort -V | tail -1 | grep .)"
  echo "${url}/${path}"
}

find_url_by_revision() {
  local name="${1}" revision="${2}" arch="${3}" suffix="${4}" url="${5}"

  first_letter="${name%"${name#?}"}"
  echo "${url}/packages/${first_letter}/${name}/${name}-${revision}-${arch}.pkg.tar.${suffix}"
}

provide_package() {
  local url="${1}"
  filename="${filename:-${url##*/}}"
  package="${ARCH_PACKAGE_CACHE}/${filename}"
  if [ -s "${package}" ]; then
    log "Using locally cached file ${package}"
  else
    log "Downloading package from ${url}"
    if [ "${DOWNLOAD:-true}" = 'true' ]; then
      mkdir -p "${ARCH_PACKAGE_CACHE}"
      curl -fsSLR -o "${package}" "${url}"
    fi
  fi
  echo "${package}"
}

install_package() {
  package="${1}"
  log "Installing package from ${package}"
  case "${package}" in
    *.zst) unpack=zstd ;;
    *.xz)  unpack=xz   ;;
    *) cancel "Unsupported type of package ${package}"
  esac
  if [ "${INSTALL:-true}" = 'true' ]; then
    "${unpack}" -d <"${package}" | tar x -C / --exclude '.*'
  fi
}

print_usage() {
  name="$(basename "${0}")"
  pad="$(printf -- ' %.0s' {1..${#name}})"
  usage=$(cat <<EOF
${name} - download and install packages from an archlinux repository

Usage: ${name} <package-spec>...
  <package-spec>: <name>['='<revision>['='<repo>['='<arch>]]]
  When revision
  - is missing, the latest package is used.
  - is '?', the actual revision is
    - read from env variable ARCH_REVISION if set, else
    - read from file '.arch/revision' in the directory of this script if existing, else
    - set to latest.
  - has date format 'YYYY-MM-DD', the package is read from archive by date.
  - has no date format, the package is read from archive by version.

Supported environment variables:
  DOWNLOAD=false       - do not download packages
  INSTALL=false        - do not install packages
  ARCH_PACKAGE_CACHE   - Use an alternative directory as package cache (Default: '${ARCH_PACKAGE_CACHE}')
  ARCH_REVISION        - Arch revision to use when revision is '?'

Examples:

${pad} Command                                      Package       Revision         Repository  Architechture
${pad} -------                                      -------       -------          ----------  -------------
  ${name} util-linux                 'util-linux'  latest           Core        current
  ${name} unrar=1:6.2.6-1            'unrar'       '1:6.2.6-1'      Archive     current
  ${name} unrar=2023-02-05=extra     'unrar'       from 2023/02/05  Extra       current
  ${name} iotop=0.6-9==any           'iotop'       '0.6-9'          Archive     'any'
  ${name} base===any                 'base'        latest           Core        'any'
  ${name} unrar==extra=aarch64       'unrar'       latest           Extra       'aarch64'
  ${name} iotop==extra=any           'iotop'       latest           Extra       'any'
EOF
)
  log "${usage}"
}

main() {
  if [ "${#}" -eq 0 ]; then
    print_usage
    return 0
  fi
  for package in "${@}"; do
    echo "${package}" | while IFS== read -r name revision repo arch; do
      if [ "${revision}" = '?' ]; then
        revision="${ARCH_REVISION:-$(cat "${arch_metadata}/revision" 2>/dev/null || true)}"
      fi
      repo="${repo:-core}"
      arch="${arch:-${TARGET_ARCHITECTURE}}"
      log "Installing archlinux package '${name}'${revision:+ in revision '${revision}'} from repo '${repo}' for arch '${arch}'"
      if ! url="$(find_package_url "${name}" "${revision}" "${repo}" "${arch}" "${TARGET_ARCHITECTURE}")"; then
        cancel "No URL found for this package-spec."
      fi
      local_file="$(provide_package "${url}")"
      install_package "${local_file}"
    done
  done
}

main "${@}"
