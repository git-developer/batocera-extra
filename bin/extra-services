#!/bin/sh
set -eu

bin_dir="$(readlink -f "$(dirname "$0")")"
root_dir="$(readlink -f "$(dirname "${bin_dir}")")"
target=/userdata/system/services

print_usage() {
  cat >&2 <<EOF
Lifecycle management for batocera-extra services

Usage: $(basename "${0}") <ACTION> [OPTION]...

where <ACTION> is one of

  install               Install all non-hidden services
  register              Register all non-hidden services as batocera services
  install-and-register  Install all non-hidden services and register as batocera services
  unregister            Stop and unregister all non-hidden services
  uninstall             Permanently uninstall all non-hidden services
  list                  List running services (-h for help)

Services whose directory name starts with a dot ('.') are hidden.
EOF
}

services_find() {
  find "${root_dir}" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -exec test -x '{}/start' \; -print
}

services_list() {
  "${bin_dir}/.status" "${@}"
}

services_install() {
  services_find | while read -r path; do
    if [ -x "${path}/install" ]; then
      "${path}/install"
    fi
  done
}

services_register() {
  if [ ! -d "${target}" ]; then
    mkdir -p "${target}"
  fi

  services_find | while read -r path; do
    if [ -x "${path}/service" ]; then
      "${path}/service" register
    fi
  done
}

services_unregister() {
  services_find | while read -r path; do
    if [ -x "${path}/service" ]; then
      service="$("${path}/service" name)"
      batocera-services stop "${service}"
      "${path}/service" unregister
    fi
  done

  rmdir --ignore-fail-on-non-empty "${target}"
}

services_uninstall() {
  services_find | while read -r path; do
    if [ -x "${path}/uninstall" ]; then
      "${path}/uninstall"
    fi
  done
}

main() {
  if [ "${#}" -eq 0 ]; then
    print_usage
    return 1
  fi
  action="${1}"
  shift
  case "${action}" in
    list)       services_list "${@}" ;;
    install-and-register) services_install && services_register ;;
    install)    services_install     ;;
    uninstall)  services_uninstall   ;;
    register)   services_register    ;;
    unregister) services_unregister  ;;
    *)
      log 'Supported arguments: [list, install-and-register, install, uninstall, register, unregister]'
  esac
}

main "${@}"
