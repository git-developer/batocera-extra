#!/bin/sh
set -eu

bin_dir="$(readlink -f "$(dirname "$0")")"
root_dir="$(readlink -f "$(dirname "${bin_dir}")")"
services_dir=/userdata/system/services

print_usage() {
  cat >&2 <<EOF
Lifecycle management for batocera-extra services

Usage: $(basename "${0}") <ACTION> [OPTION]...

where <ACTION> is one of

  status [-n]           Show running services ('-n' to omit header)
  list                  List all services, including hidden
  install               Install all services
  uninstall             Permanently uninstall all services
  register              Register all services as batocera services
  unregister            Stop and unregister all services

Hidden services are ignored for all actions except 'list'.
EOF
}

services_find_all() {
  find "${root_dir}" -mindepth 1 -maxdepth 1 -type d -exec test -x '{}/service' \; -print | sort
}

services_find() {
  services_find_all | while read -r service; do
    if [ ! -r "${service}/.hidden" ]; then echo "${service}"; fi
  done
}

for_each_service() {
  services_find | while read -r path; do
    if [ -x "${path}/service" ]; then
      "${path}/service" "${@}"
    fi
  done
}

services_list() {
  services_find_all | while read -r path; do
    if [ -r "${path}/.hidden" ]; then
      status=hidden
    elif "${path}/service" status | grep -q .; then
      status=started
    else
      status=stopped
    fi
    printf '%-16s\t%s\n' "$(basename "${path}")" "${status}"
  done
}

services_status() {
  header=true
  case "${1-}" in
    -n | --no-header) header=false ;;
  esac

  if [ "${header}" = 'true' ]; then
    printf '%-16s\t%-7s\t%-16s\t%-5s\t%s\n' Service PID Name Port Comment
  fi
  for_each_service status
}

services_install() {
  for_each_service install
}

services_register() {
  mkdir -p "${services_dir}"
  for_each_service register
}

services_unregister() {
  for_each_service unregister
  rmdir --ignore-fail-on-non-empty "${services_dir}"
}

services_uninstall() {
  for_each_service uninstall
}

main() {
  if [ "${#}" -eq 0 ]; then
    print_usage
    return 1
  fi
  action="${1}"
  shift
  case "${action}" in
    status)     services_status "${@}" ;;
    list)       services_list          ;;
    install)    services_install       ;;
    uninstall)  services_uninstall     ;;
    register)   services_register      ;;
    unregister) services_unregister    ;;
    *)
      echo >&2 'Supported arguments: [status, list, install, uninstall, register, unregister]'
  esac
}

main "${@}"
