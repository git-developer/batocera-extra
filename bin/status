#!/bin/sh
set -eu

all=false
header=true
usage=false

print_usage() {
  cat >&2 <<EOF
Status monitor for batocera-extra services
Lists running services with their ports.

Usage: $(basename "${0}") [OPTION]...

  -a,  --all          Print all processes, not only port owners
  -h,  --help         Display this help and exit
  -n,  --no-header    Do not print header
EOF
}

parse_args() {
  while getopts anh-: opt; do
    if [ "${opt}" = '-' ]; then   # long option
      opt="${OPTARG}"             # extract long option name
    fi
    case "${opt}" in
      a | all)       all=true     ;;
      h | help)      usage=true   ;;
      n | no-header) header=false ;;
      ??* )          echo >&2 "Illegal option --${opt}"; return 1;; # bad long option
      ? )            return 1     ;;                                # bad short option (error reported via getopts)
    esac
  done
  shift $((OPTIND-1))
}

main() {
  root="$(readlink -f "$(dirname "$0")"/..)"

  if [ "${header}" = 'true' ]; then
    printf '%-16s\t%s\t%s\t%s\n' Name PID Port Comment
  fi

  find "${root}" -mindepth 2 -maxdepth 2 -executable -name is-up | sort | while read -r script; do
    "${script}" | {
      name="$(basename "$(dirname "${script}")")"
      while read -r pid comment; do
        port="$(lsof -p "${pid}" -a -iUDP -Fn | sed -nE 's/^n.*:([0-9]+)$/\1/p')"
        if [ "${all}" = 'true' ] || [ "${port}" ]; then
          printf '%-16s\t%s\t%s\t%s\n' "${name}" "${pid}" "${port}" "${comment-}"
        fi
      done
    }
  done
}

parse_args "${@}"
if [ "${usage}" = 'true' ]; then
  print_usage
else
  main "${@}"
fi
